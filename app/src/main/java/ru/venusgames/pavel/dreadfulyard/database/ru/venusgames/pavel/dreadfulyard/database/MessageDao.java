package ru.venusgames.pavel.dreadfulyard.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ru.venusgames.pavel.dreadfulyard.database.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageChatId = new Property(1, String.class, "messageChatId", false, "MESSAGE_CHAT_ID");
        public final static Property MessageUserId = new Property(2, String.class, "messageUserId", false, "MESSAGE_USER_ID");
        public final static Property MessageMessageId = new Property(3, String.class, "messageMessageId", false, "MESSAGE_MESSAGE_ID");
        public final static Property MessageType = new Property(4, String.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property MessageStatus = new Property(5, Integer.class, "messageStatus", false, "MESSAGE_STATUS");
        public final static Property MessageData = new Property(6, String.class, "messageData", false, "MESSAGE_DATA");
        public final static Property MessageTimeStamp = new Property(7, java.util.Date.class, "messageTimeStamp", false, "MESSAGE_TIME_STAMP");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"MESSAGE_CHAT_ID\" TEXT," + // 1: messageChatId
                "\"MESSAGE_USER_ID\" TEXT," + // 2: messageUserId
                "\"MESSAGE_MESSAGE_ID\" TEXT," + // 3: messageMessageId
                "\"MESSAGE_TYPE\" TEXT," + // 4: messageType
                "\"MESSAGE_STATUS\" INTEGER," + // 5: messageStatus
                "\"MESSAGE_DATA\" TEXT," + // 6: messageData
                "\"MESSAGE_TIME_STAMP\" INTEGER);"); // 7: messageTimeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String messageChatId = entity.getMessageChatId();
        if (messageChatId != null) {
            stmt.bindString(2, messageChatId);
        }
 
        String messageUserId = entity.getMessageUserId();
        if (messageUserId != null) {
            stmt.bindString(3, messageUserId);
        }
 
        String messageMessageId = entity.getMessageMessageId();
        if (messageMessageId != null) {
            stmt.bindString(4, messageMessageId);
        }
 
        String messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindString(5, messageType);
        }
 
        Integer messageStatus = entity.getMessageStatus();
        if (messageStatus != null) {
            stmt.bindLong(6, messageStatus);
        }
 
        String messageData = entity.getMessageData();
        if (messageData != null) {
            stmt.bindString(7, messageData);
        }
 
        java.util.Date messageTimeStamp = entity.getMessageTimeStamp();
        if (messageTimeStamp != null) {
            stmt.bindLong(8, messageTimeStamp.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageChatId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // messageUserId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // messageMessageId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // messageType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // messageStatus
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // messageData
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // messageTimeStamp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageChatId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessageUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageMessageId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessageType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessageStatus(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMessageData(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMessageTimeStamp(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
